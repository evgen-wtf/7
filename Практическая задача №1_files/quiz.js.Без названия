/*
* Скрипт js подключается только на странице проходения теста
* Использует бибилиотеку jquery
* */


//можно ли проверять заполненые ли все вопросы или нет
var canCheck = true;

//показывать ли уведомление о пустых вопросах
var showNoticeEmptyQue = true;

//текст уведомления
var showNoticeEmptyQueText = '';

/*Устанавливаем текст уведомления. Вызывается из файлы lib.php*/
function setLangEmpty(a, b) {
    showNoticeEmptyQueText = b;
}

//Отмена прокрутки видео
function initVideo() {
    var attemptid = $('[name="attempt"]').val();
    attemptid = parseInt(attemptid);
    var ispfo = $('body.pfo-course').get().length > 0;
    //select video player and the current time
    if (!isNaN(attemptid) && ispfo) {
        var video = document.getElementsByTagName('video')[0];
        if (video) {
            $(video).prop('controls', false).attr('controlsList', "nodownload").attr('oncontextmenu', 'return false;');
            var data = {
                action: 'getTimerAttempt',
                intparam1: attemptid
            };
            var updaterTimer = false;
            $.ajax({
                type: "POST",
                url: '/blocks/orgs/ajax.php',
                data: data,
                success: function (response1) {
                    var startTime = parseInt(response1)
                    var supposedCurrentTime = startTime;
                    var firstplay = false;
                    var canPause = false;
                    $(video).prop('controls', true).attr('autoplay', 'true').attr('poster', '/theme/sdo/pix/esa.png').css('background-color', '#000000');
                    if (startTime > 0) {
                        var initVideoInterval = setInterval(function () {
                            if (video.readyState) {
                                var duration = video.duration;
                                if (!isNaN(duration) && duration > 0) {
                                    // supposedCurrentTime = startTime;
                                    // video.currentTime = startTime;
                                    clearInterval(initVideoInterval);
                                }
                            }
                        }, 300);
                    }
                    video.addEventListener('pause', function () {
                        if (!canPause)
                            video.play();
                    });
                    video.addEventListener('play', function () {
                        if (!firstplay) {
                            supposedCurrentTime = startTime;
                            video.currentTime = startTime;
                        }
                        firstplay = true;
                    });
                    video.addEventListener('ended', function () {
                        canPause = true;
                        video.pause();
                        $(video).prop('conrols', false);
                    });
                    video.addEventListener('oncontextmenu', function () {
                        return false;
                    });
                    video.addEventListener('timeupdate', function () {
                        if (!video.seeking) {
                            supposedCurrentTime = video.currentTime;
                            if (!updaterTimer) {
                                var a = {
                                    action: 'setTimerAttempt',
                                    intparam1: attemptid,
                                    intparam2: Math.round(supposedCurrentTime)
                                };
                                updaterTimer = true;
                                $.ajax({
                                    type: "POST",
                                    url: '/blocks/orgs/ajax.php',
                                    data: a,
                                    success: function (response1) {
                                        setTimeout(function () {
                                            updaterTimer = false;
                                        }, 1500)
                                    }
                                });
                            }
                        }

                    });
// prevent user from seeking
                    video.addEventListener('seeking', function () {
                        // guard agains infinite recursion:
                        // user seeks, seeking is fired, currentTime is modified, seeking is fired, current time is modified, ....
                        var delta = video.currentTime - supposedCurrentTime;
                        if (Math.abs(delta) > 0.01) {
                            console.log("Seeking is disabled");
                            video.currentTime = supposedCurrentTime;
                        }
                    });
                }
            });
        }
    }
}

var canCheckSelects = false;
function checkMultiSelect()
{
    var allCheck = true;
    $(".que.multianswer .custom-select").each(function (){
        var val = $(this).val();
        if(val)
        {
            $(this).removeClass('error');
        } else {
            $(this).addClass('error');
            allCheck = false;
        }
    });
    return allCheck;
}
function initMultiSelects()
{
    var selects = $(".que.multianswer .custom-select").get()
    $(selects).change(function (){
        if(canCheckSelects)
        {
            var check = checkMultiSelect();
            if(check)
                $('[type="submit"]').prop('disabled', false);
        }

    });
    if(selects.length > 4)
    {
        $('[type="submit"]').hover(function (){
            var check = checkMultiSelect();
            if(!check) {
                $('[type="submit"]').prop('disabled', true);
                alert("Отметьте, пожалуйста, все варианты");
                canCheckSelects = true;
                //checkMultiSelect();
            }
        });
    }
}

require(['jquery'], function ($) {

    initMultiSelects();
    function initLabelCheckQUE(event) {
        $(".que input[type='radio']").each(function () {
            var id = $(this).attr('id');
            var img = $('label[for="' + id + '"] img').get();
            if (img.length) {
                if ($(this).prop('checked')) {
                    $('label[for="' + id + '"]').addClass('check');
                } else
                    $('label[for="' + id + '"]').removeClass('check');
                if (event) {
                    $('label[for="' + id + '"]').addClass('onlyimgcheck')
                    $(this).hide();
                    $(this).click(function () {
                        initLabelCheckQUE(false);
                    });
                }
            }
        })
    }

    initLabelCheckQUE(true);


    setInterval(function () {
        canCheck = true;
    }, 200);

    /*Функция проверки неотвеченных вопросов в навигации*/
    function hasNoAnsweredPages() {
        if ($(".qn_buttons.multipages").get().length > 0) {
            if ($(".qnbutton.notyetanswered:not(.thispage)").get().length > 0) return true;
        }
        return false;
    }

    /*Функция проверки неотвеченных вопросов в полях input checkbox и radio*/
    function checkEmptyField() {
        var hasEmpty = false;
        $(".que").each(function () {
            var hasCheck = false;
            var hasChecker = false;
            $('input[type="checkbox"], input[type="radio"]', this).each(function () {
                if ($(this).prop('checked')) hasCheck = true;
                hasChecker = true;
            })
            if (!hasCheck && hasChecker) hasEmpty = true;
            $('input[type="text"]', this).each(function () {
                var val = $(this).val();
                if (!val) hasEmpty = true;
            })
        })
        return hasEmpty;
    }

    /*При нажатии на кнопки навигации запрещаем проверку на неотвеченные вопросы*/
    $(".qnbutton").click(function () {
        canCheck = false;
    })

    /*Ловим нажатие клавиш на всех элементах ввода вопроса. Если нажали Enter, то нажимаем на кнопку далее или завершение теста*/
    var qui = 0;
    $('.que input[type="checkbox"], .que input[type="radio"], .que input[type="text"]').each(function () {
        qui++;
        if (qui == 1)
            $(this).focus();
        $(this).keyup(function (e) {
            if (e.keyCode == 13 && showNoticeEmptyQue) {
                if ($("#nextTestPage").length) {
                    $("#nextTestPage").trigger('click');
                } else if ($("#endTest").length) {
                    $("#endTest").trigger('click');
                } else
                    $(".submitbtns .singlebutton button").trigger('click');
            }
        })
    })


    /*Ловим событие нажатия на кнопки завершения теста и проверяем на присутствие неотвеченных вопросов, если есть то выводит уведомление*/
    $("input#endTest, a.endtestlink, .submitbtns .singlebutton button").on('click', function (e) {
        if (!$("#q1[class *= 'fireexam']").length && !$("#q1[class *= 'physics']").length) {
            if (canCheck && showNoticeEmptyQue) {
                if (hasNoAnsweredPages() || checkEmptyField()) {
                    //e.preventDefault();
                    //e.stopImmediatePropagation();
                    showNoticeEmptyQue = false;
                    alert(showNoticeEmptyQueText);
                    //window.location.href = $('a.notyetanswered:first').attr('href');
                    //return false;
                }
            }
        }
    });

    /*Auto click on button when selecting
    $(document).on('click', '#responseform .que input[type="radio"]', function () {
	$("#nextTestPage").trigger('click');
    });

    $(document).on('change', '#responseform .que select', function () {
	var check = true;
        $('#responseform .que select').each(function(){
	    if($(this).val() == ''){
		check = false;
		return;
	    }
	});
	if(check){
	    $("#nextTestPage").trigger('click');
	}
    });
    ************************************/

    $(document).on('click', '#modalEnd', function (e) {
        e.preventDefault();
        $('#load_icon').removeAttr('hidden');
        $('#modalEnd').prop('disabled', true);
        if ($('iframe').contents().find('body').html() != '<p><br data-mce-bogus="1"></p>') {
            $("div.answer .qtype_essay_editor textarea").val($('iframe').contents().find('body').html());
        }
        var form = $('#responseform');
        var data = new FormData(form[0]);
        $.ajax({
            type: "POST",
            url: '/mod/quiz/processattempt.php',
            data: data,
            processData: false,
            contentType: false,
            success: function (response) {
                data = 'attempt=' + $("input[name='attempt']").val() + '&finishattempt=1&timeup=0&slots=&sesskey=' + $("input[name='sesskey']").val();
                $.ajax({
                    type: "POST",
                    url: '/mod/quiz/processattempt.php',
                    data: data,
                    dataType: 'html',
                    complete: function (response1) {
                        window.onbeforeunload = null;
                        if ($("#courseid[name='pfi']").length && $("#roleid").val() == 5) {
                            window.location.href = '/course/view.php?id=' + $("#courseid[name='pfi']").val();
                        } else {
                            window.location.href = '/mod/quiz/review.php?attempt=' + $("input[name='attempt']").val();
                        }
                    }
                });
            },
            error: function (error) {
                if ($("#courseid[name='pfi']").length) {
                    window.location.href = '/course/view.php?id=' + $("#courseid[name='pfi']").val();
                }
            }
        });
    });

    $(document).ready(function () {
        resize(".shulte table", 600, 600, ".matrix_answer");
        resize(".qtext iframe", "100%", 400);
        initVideo();
    });

    $(window).resize(function () {
        resize(".shulte table", 600, 600, ".matrix_answer");
        resize(".qtext iframe", "100%", 400);
    });

    function resize(pathCss, maxW, maxH, pathFont = "") {
        if ($(pathCss)) {
            if (window.innerWidth < 1900) {
                if (typeof (maxW) == "string") {
                    $(pathCss).innerWidth(maxW);
                } else {
                    $(pathCss).innerWidth(maxW * (window.innerWidth / 1900) + "px");//*0.7);
                }
                if (typeof (maxH) == "string") {
                    $(pathCss).innerHeight(maxH);
                } else {
                    $(pathCss).innerHeight(maxH * (window.innerWidth / 1900) + "px");//*0.7);
                }
                if (pathFont != "") {
                    $(pathFont).css('font-size', (3 * (window.innerWidth / 1900) * 0.7) + "rem");
                }
            }
        }
    }
});